// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define your database schema here
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

model User {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  introduction     String?
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  contracts        Contract[]
  profile          Profile?
  certifications   Certification[]
  badges           Badge[]
  projects         Project[]
}

model Contract {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       @unique

  user        User      @relation(fields: [userId], references: [id])
  image       Image?
}

model Profile {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  userId      Int       @unique

  user        User      @relation(fields: [userId], references: [id])
  image       Image?
}

model Certification {
  id          Int       @id @default(autoincrement())
  name        String
  authority   String
  licenseNo   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  user        User      @relation(fields: [userId], references: [id])
  image       Image?
}

model Badge {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  user        User      @relation(fields: [userId], references: [id])
  image       Image?
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int

  user        User      @relation(fields: [userId], references: [id])
  images      Image[]
}

model Image {
  id              Int       @id @default(autoincrement())
  url             String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  projectId       Int?
  badgeId         Int?      @unique
  certificationId Int?      @unique
  profileId       Int?      @unique
  contractId      Int?      @unique

  project         Project?        @relation(fields: [projectId], references: [id])
  badge           Badge?          @relation(fields: [badgeId], references: [id])
  certification   Certification?  @relation(fields: [certificationId], references: [id])
  profile         Profile?        @relation(fields: [profileId], references: [id])
  contract        Contract?       @relation(fields: [contractId], references: [id])
}

model VerificationToken {
  identifier  String
  token       String     @unique
  expires     DateTime

  @@unique([identifier, token])
}