generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  createdAt      DateTime        @default(now())
  firstName      String
  introduction   String?
  lastName       String
  password       String
  updatedAt      DateTime        @updatedAt
  emailVerified  DateTime?

  accounts       Account[]
  badges         Badge[]
  certifications Certification[]
  contracts      Contract?
  profile        Profile?
  projects       Project[]
  refreshTokens  RefreshToken[]
}

model Contract {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int      @unique

  user      User     @relation(fields: [userId], references: [id])
  image     Image?
}

model Certification {
  id        Int      @id @default(autoincrement())
  name      String
  authority String
  licenseNo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int

  user      User     @relation(fields: [userId], references: [id])
  image     Image?

  @@index([userId], map: "Certification_userId_fkey")
}

model Badge {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int

  user      User     @relation(fields: [userId], references: [id])
  image     Image?

  @@index([userId], map: "Badge_userId_fkey")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      Int

  images      Image[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Project_userId_fkey")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int      @unique

  image     Image?
  user      User     @relation(fields: [userId], references: [id])
}

model Image {
  id              Int            @id @default(autoincrement())
  url             String
  publicId        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  projectId       Int?
  badgeId         Int?           @unique
  certificationId Int?           @unique
  profileId       Int?           @unique
  contractId      Int?           @unique
  userId          Int?           @unique

  badge           Badge?         @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  certification   Certification? @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  contract        Contract?      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  profile         Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project         Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "Image_projectId_fkey")
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  token_type        String?
  id_token          String?
  session_state     String?

  userId            Int

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  tokenHash  String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?
  replacedBy String?
  ipAddress  String?
  userAgent  String?

  userId     Int

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
  @@index([expiresAt], map: "RefreshToken_expiresAt_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expiresAt  DateTime

  @@unique([identifier, token])
}
